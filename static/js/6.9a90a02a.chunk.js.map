{"version":3,"sources":["components/common/formsControls/formsControls.module.css","components/common/formsControls/formsControls.js","utils/validators/validators.js","components/login/login.jsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","restprops","Input","child","createField","placeholder","name","validators","component","validate","text","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","formSummeryError","connect","state","auth","isAuth","login","to","formData","email","password","rememberMe","captcha"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,8LCKrHC,EAAc,SAAC,GAAwD,EAAvDC,MAAwD,IAAD,IAAhDC,KAAOC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAQC,EAAwB,EAAxBA,SAE3CC,GAFmE,2CAExDH,GAAWC,GAC5B,OACI,yBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,KACxD,6BACKC,GAEJC,GAAY,8BAAOF,KAMnBM,EAAW,SAACC,GAAW,IACzBV,EAAuCU,EAAvCV,MAA0BW,GAAaD,EAAhCT,KAAgCS,EAA1BN,SADW,YACeM,EADf,8BAE/B,OAAO,kBAACX,EAAgBW,EAAO,8CAAcV,EAAWW,MAI/CC,EAAQ,SAACF,GAAW,IACtBV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBG,MADQ,YACeH,EADf,2BAE5B,OAAO,kBAACX,EAAgBW,EAAO,2CAAWV,EAAWW,MAI5CG,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAhC,IAA2CR,EAA3C,uDAAiD,GAAjD,+DAAiE,6BAAK,kBAAC,IAAD,eACrFK,YAAaA,EACbC,KAAMA,EACNG,SAAUF,EACVC,UAAWA,GACPR,EALiF,CAMrFU,MAAI,Q,iCCtChB,oEAAO,IAAMC,EAAW,SAAAC,GACpB,IAAGA,EACH,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAGA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCP1C,gGA6BME,EAAkBC,YAAU,CAACC,KAAM,SAAjBD,EApBN,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAc1B,EAAuB,EAAvBA,MAAO2B,EAAgB,EAAhBA,WACrC,OACI,0BAAMC,SAAUF,GACXf,YAAY,QAAS,QAAS,CAACO,KAAWT,KAC1CE,YAAY,WAAY,WAAY,CAACO,KAAWT,IAAO,CAACoB,KAAM,aAC9DlB,YAAY,KAAM,aAAc,GAAIF,IAAO,CAACoB,KAAM,YAAa,eAE/DF,GAAc,yBAAKG,IAAKH,IACxBA,GAAchB,YAAY,qBAAsB,UAAW,CAACO,KAAWT,IAAO,IAE9ET,GAAS,yBAAMG,UAAWC,IAAE2B,kBACxB/B,GAEL,6BACI,8CAyBDgC,uBANS,SAACC,GAAD,MAAY,CAChCN,WAAYM,EAAMC,KAAKP,WACvBQ,OAAQF,EAAMC,KAAKC,UAIiB,CAACC,WAA1BJ,EAjBD,SAACzB,GAKX,OAAGA,EAAM4B,OAAe,kBAAC,IAAD,CAAUE,GAAI,aAC/B,6BACH,qCACA,kBAACd,EAAD,CAAgBK,SAPH,SAACU,GACd/B,EAAM6B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAMzCf,WAAYpB,EAAMoB","file":"static/js/6.9a90a02a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formsControls_formControl__2nbfC\",\"error\":\"formsControls_error__2j6e4\",\"formSummeryError\":\"formsControls_formSummeryError__29F9n\"};","import React from \"react\";\r\nimport s from './formsControls.module.css';\r\nimport { Field } from \"redux-form\";\r\n\r\n\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children, ...props}) => {\r\n    // debugger;\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, children, ...restprops} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restprops}/></FormControl>\r\n}\r\n        \r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restprops} = props;\r\n    return <FormControl {...props}><input {...input} {...restprops} /></FormControl>\r\n\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props={}, text='') => <div><Field \r\n            placeholder={placeholder}\r\n            name={name} \r\n            validate={validators} \r\n            component={component} \r\n            {...props} \r\n            text /></div>\r\n\r\n","export const required = value => {\r\n    if(value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { Input, createField } from '../common/formsControls/formsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport {login} from '../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom';\r\nimport s from '../common/formsControls/formsControls.module.css'\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', [required], Input, )}\r\n            {createField('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField(null, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n\r\n            {captchaUrl && <img src={captchaUrl} /> }\r\n            {captchaUrl && createField('symbols from image', 'captcha', [required], Input, {})}\r\n\r\n            {error && <div  className={s.formSummeryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n        )\r\n}\r\n\r\nconst LoginReduxForm  = reduxForm({form: 'login'})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    }\r\n\r\n    if(props.isAuth) return <Redirect to={'/content'}/>\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n    </div>\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}