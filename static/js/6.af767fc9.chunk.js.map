{"version":3,"sources":["components/common/formsControls/formsControls.module.css","components/common/formsControls/formsControls.js","utils/validators/validators.js","components/login/login.jsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","alt","formSummeryError","connect","state","auth","isAuth","login","to","formData","email","password","rememberMe","captcha"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,8LCIrHC,EAAc,SAAC,GAA8C,EAA7CC,MAA8C,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAC3CC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,KACxD,6BACKC,GAEJC,GAAY,8BAAOF,KAKnBM,EAAW,SAACC,GAAW,IACzBV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MADW,YACYF,EADZ,2BAE/B,OAAO,kBAACX,EAAgBW,EAAO,8CAAcV,EAAWW,MAG/CE,EAAQ,SAACH,GAAW,IACtBV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MADQ,YACeF,EADf,2BAE5B,OAAO,kBAACX,EAAgBW,EAAO,2CAAWV,EAAWW,MAG5CG,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAhC,IAA2CR,EAA3C,uDAAmD,GAAIS,EAAvD,uDAA8D,GAA9D,OACvB,6BACI,kBAAC,IAAD,eAAOJ,YAAaA,EAAaC,KAAMA,EAChCI,SAAUH,EACVC,UAAWA,GACPR,IAJf,IAKQS,K,iCCjCZ,oEAAO,IAAME,EAAW,SAAAC,GACpB,IAAGA,EACH,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAGA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCP1C,gGA6BME,EAAkBC,YAAU,CAACC,KAAM,SAAjBD,EApBN,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAc1B,EAAuB,EAAvBA,MAAO2B,EAAgB,EAAhBA,WACrC,OACI,0BAAMC,SAAUF,GACXf,YAAY,QAAS,QAAS,CAACO,KAAWR,KAC1CC,YAAY,WAAY,WAAY,CAACO,KAAWR,IAAO,CAACmB,KAAM,aAC9DlB,YAAY,KAAM,aAAc,GAAID,IAAO,CAACmB,KAAM,YAAa,eAE/DF,GAAc,yBAAKG,IAAKH,EAAYI,IAAI,KACxCJ,GAAchB,YAAY,qBAAsB,UAAW,CAACO,KAAWR,IAAO,IAE9EV,GAAS,yBAAMG,UAAWC,IAAE4B,kBACxBhC,GAEL,6BACI,8CAyBDiC,uBANS,SAACC,GAAD,MAAY,CAChCP,WAAYO,EAAMC,KAAKR,WACvBS,OAAQF,EAAMC,KAAKC,UAIiB,CAACC,WAA1BJ,EAjBD,SAAC1B,GAKX,OAAGA,EAAM6B,OAAe,kBAAC,IAAD,CAAUE,GAAI,aAC/B,6BACH,qCACA,kBAACf,EAAD,CAAgBK,SAPH,SAACW,GACdhC,EAAM8B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAMzChB,WAAYpB,EAAMoB","file":"static/js/6.af767fc9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"formsControls_formControl__2nbfC\",\"error\":\"formsControls_error__2j6e4\",\"formSummeryError\":\"formsControls_formSummeryError__29F9n\"};","import React from \"react\";\r\nimport s from './formsControls.module.css';\r\n// import {required} from \"../../../utils/validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","export const required = value => {\r\n    if(value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport { Input, createField } from '../common/formsControls/formsControls';\r\nimport {  required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport {login} from '../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom';\r\nimport s from '../common/formsControls/formsControls.module.css'\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', [required], Input, )}\r\n            {createField('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField(null, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt=''/> }\r\n            {captchaUrl && createField('symbols from image', 'captcha', [required], Input, {})}\r\n\r\n            {error && <div  className={s.formSummeryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n        )\r\n}\r\n\r\nconst LoginReduxForm  = reduxForm({form: 'login'})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    }\r\n\r\n    if(props.isAuth) return <Redirect to={'/content'}/>\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n    </div>\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}